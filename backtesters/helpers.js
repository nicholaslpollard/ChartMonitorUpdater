// helpers.js
function SMA(arr, period) { if (!arr || arr.length < period) return null; return arr.slice(-period).reduce((a, b) => a + b, 0) / period; }
function smaSlope(arr, period = 3) { if (!arr || arr.length < period + 1) return null; let slope = 0; for (let i = arr.length - period; i < arr.length; i++) slope += arr[i] - arr[i - 1]; return slope; }
function RSI(prices, period = 14) { if (!prices || prices.length < period + 1) return null; let gains = 0, losses = 0; for (let i = prices.length - period; i < prices.length; i++) { const diff = prices[i] - prices[i - 1]; if (diff > 0) gains += diff; else losses -= diff; } if (losses === 0) return 100; return 100 - 100 / (1 + gains / losses); }
function ATR(candles, period = 14) { if (!candles || candles.length < period + 1) return null; const trs = []; for (let i = candles.length - period; i < candles.length; i++) { const curr = candles[i], prev = candles[i - 1]; trs.push(Math.max(curr.high - curr.low, Math.abs(curr.high - prev.close), Math.abs(curr.low - prev.close))); } return trs.reduce((a, b) => a + b, 0) / trs.length; }
function trendDirection(candles) { if (!candles || candles.length < 21) return null; const closes = candles.map(c => c.close); const sma9 = SMA(closes, 9); const sma21 = SMA(closes, 21); if (sma9 === null || sma21 === null) return null; return sma9 > sma21 ? 'up' : 'down'; }
function BollingerBands(prices, period = 20, mult = 2) { if (!prices || prices.length < period) return null; const sma = SMA(prices, period); const variance = prices.slice(-period).reduce((sum, p) => sum + Math.pow(p - sma, 2), 0) / period; const stdDev = Math.sqrt(variance); return { upper: sma + mult * stdDev, lower: sma - mult * stdDev }; }
function ADX(candles, period = 14) { if (!candles || candles.length < period + 1) return null; const trList = [], plusDM = [], minusDM = []; for (let i = 1; i < candles.length; i++) { const curr = candles[i], prev = candles[i - 1]; const highDiff = curr.high - prev.high; const lowDiff = prev.low - curr.low; plusDM.push(highDiff > lowDiff && highDiff > 0 ? highDiff : 0); minusDM.push(lowDiff > highDiff && lowDiff > 0 ? lowDiff : 0); trList.push(Math.max(curr.high - curr.low, Math.abs(curr.high - prev.close), Math.abs(curr.low - prev.close))); } const smTR = SMA(trList, period); const smPlus = SMA(plusDM, period); const smMinus = SMA(minusDM, period); const plusDI = (smPlus / smTR) * 100; const minusDI = (smMinus / smTR) * 100; return (Math.abs(plusDI - minusDI) / (plusDI + minusDI)) * 100; }

module.exports = { SMA, smaSlope, RSI, ATR, trendDirection, BollingerBands, ADX };
